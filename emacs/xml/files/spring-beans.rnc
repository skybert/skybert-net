# Spring XML Beans DTD, version 1.2
# Authors: Rod Johnson, Juergen Hoeller, Alef Arendsen, Colin Sampaleanu, Rob Harrop
# 
# This defines a simple and consistent way of creating a namespace
# of JavaBeans objects, managed by a Spring BeanFactory, read by
# XmlBeanDefinitionReader (with DefaultBeanDefinitionDocumentReader).
# 
# This document type is used by most Spring functionality, including
# web application contexts, which are based on bean factories.
# 
# Each "bean" element in this document defines a JavaBean.
# Typically the bean class is specified, along with JavaBean properties
# and/or constructor arguments.
# 
# Bean instances can be "singletons" (shared instances) or "prototypes"
# (independent instances). Further scopes are supposed to be built on top
# of the core BeanFactory infrastructure and are therefore not part of it.
# 
# References among beans are supported, that is, setting a JavaBean property
# or a constructor argument to refer to another bean in the same factory
# (or an ancestor factory).
# 
# As alternative to bean references, "inner bean definitions" can be used.
# Singleton flags of such inner bean definitions are effectively ignored:
# Inner beans are typically anonymous prototypes.
# 
# There is also support for lists, sets, maps, and java.util.Properties
# as bean property types or constructor argument types.
# 
# For simple purposes, this DTD is sufficient. As of Spring 2.0,
# XSD-based bean definitions are supported as more powerful alternative.
# 
# XML documents that conform to this DTD should declare the following doctype:
# 
# <!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
#	"http://www.springframework.org/dtd/spring-beans.dtd">

# The document root. A document can contain bean definitions only,
# imports only, or a mixture of both (typically with imports first).

namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

beans =
  element beans {
    attlist.beans, description?, (import | alias | bean)*
  }
# Default values for all bean definitions. Can be overridden at
# the "bean" level. See those attribute definitions for details.
attlist.beans &=
  [ a:defaultValue = "false" ]
  attribute default-lazy-init { "true" | "false" }?
attlist.beans &=
  [ a:defaultValue = "no" ]
  attribute default-autowire {
    "no" | "byName" | "byType" | "constructor" | "autodetect"
  }?
attlist.beans &=
  [ a:defaultValue = "none" ]
  attribute default-dependency-check {
    "none" | "objects" | "simple" | "all"
  }?
attlist.beans &= attribute default-init-method { text }?
attlist.beans &= attribute default-destroy-method { text }?
# Element containing informative text describing the purpose of the enclosing
# element. Always optional.
# Used primarily for user documentation of XML bean definition documents.
description = element description { attlist.description, text }
attlist.description &= empty
# Specifies an XML bean definition resource to import.
import = element import { attlist.import, empty }
# The relative resource location of the XML bean definition file to import,
# for example "myImport.xml" or "includes/myImport.xml" or "../myImport.xml".
attlist.import &= attribute resource { text }
# Defines an alias for a bean, which can reside in a different definition file.
alias = element alias { attlist.alias, empty }
# The name of the bean to define an alias for.
attlist.alias &= attribute name { text }
# The alias name to define for the bean.
attlist.alias &= attribute alias { text }
# Defines a single (usually named) bean.
# 
# A bean definition may contain nested tags for constructor arguments,
# property values, lookup methods, and replaced methods. Mixing constructor
# injection and setter injection on the same bean is explicitly supported.
bean =
  element bean {
    attlist.bean,
    description?,
    (constructor-arg | property | lookup-method | replaced-method)*
  }
# Beans can be identified by an id, to enable reference checking.
# 
# There are constraints on a valid XML id: if you want to reference your bean
# in Java code using a name that's illegal as an XML id, use the optional
# "name" attribute. If neither is given, the bean class name is used as id
# (with an appended counter like "#2" if there is already a bean with that name).
attlist.bean &= attribute id { xsd:ID }?
# Optional. Can be used to create one or more aliases illegal in an id.
# Multiple aliases can be separated by any number of spaces, commas, or
# semi-colons (or indeed any mixture of the three).
attlist.bean &= attribute name { text }?
# Each bean definition must specify the fully qualified name of the class,
# except if it pure serves as parent for child bean definitions.
attlist.bean &= attribute class { text }?
# Optionally specify a parent bean definition.
# 
# Will use the bean class of the parent if none specified, but can
# also override it. In the latter case, the child bean class must be
# compatible with the parent, i.e. accept the parent's property values
# and constructor argument values, if any.
# 
# A child bean definition will inherit constructor argument values,
# property values and method overrides from the parent, with the option
# to add new values. If init method, destroy method, factory bean and/or factory
# method are specified, they will override the corresponding parent settings.
# 
# The remaining settings will always be taken from the child definition:
# depends on, autowire mode, dependency check, singleton, lazy init.
attlist.bean &= attribute parent { text }?
# Is this bean "abstract", i.e. not meant to be instantiated itself but
# rather just serving as parent for concrete child bean definitions.
# Default is "false". Specify "true" to tell the bean factory to not try to
# instantiate that particular bean in any case.
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &= attribute abstract { "true" | "false" }?
# Is this bean a "singleton" (one shared instance, which will
# be returned by all calls to getBean() with the id),
# or a "prototype" (independent instance resulting from each call to
# getBean(). Default is singleton.
# 
# Singletons are most commonly used, and are ideal for multi-threaded
# service objects.
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &= attribute singleton { "true" | "false" }?
# If this bean should be lazily initialized.
# If false, it will get instantiated on startup by bean factories
# that perform eager initialization of singletons.
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &=
  [ a:defaultValue = "default" ]
  attribute lazy-init { "true" | "false" | "default" }?
# Optional attribute controlling whether to "autowire" bean properties.
# This is an automagical process in which bean references don't need to be coded
# explicitly in the XML bean definition file, but Spring works out dependencies.
# 
# There are 5 modes:
# 
# 1. "no"
# The traditional Spring default. No automagical wiring. Bean references
# must be defined in the XML file via the <ref> element. We recommend this
# in most cases as it makes documentation more explicit.
# 
# 2. "byName"
# Autowiring by property name. If a bean of class Cat exposes a dog property,
# Spring will try to set this to the value of the bean "dog" in the current factory.
# If there is no matching bean by name, nothing special happens;
# use dependency-check="objects" to raise an error in that case.
# 
# 3. "byType"
# Autowiring if there is exactly one bean of the property type in the bean factory.
# If there is more than one, a fatal error is raised, and you can't use byType
# autowiring for that bean. If there is none, nothing special happens;
# use dependency-check="objects" to raise an error in that case.
# 
# 4. "constructor"
# Analogous to "byType" for constructor arguments. If there isn't exactly one bean
# of the constructor argument type in the bean factory, a fatal error is raised.
# 
# 5. "autodetect"
# Chooses "constructor" or "byType" through introspection of the bean class.
# If a default constructor is found, "byType" gets applied.
# 
# The latter two are similar to PicoContainer and make bean factories simple to
# configure for small namespaces, but doesn't work as well as standard Spring
# behaviour for bigger applications.
# 
# Note that explicit dependencies, i.e. "property" and "constructor-arg" elements,
# always override autowiring. Autowire behavior can be combined with dependency
# checking, which will be performed after all autowiring has been completed.
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &=
  [ a:defaultValue = "default" ]
  attribute autowire {
    "no"
    | "byName"
    | "byType"
    | "constructor"
    | "autodetect"
    | "default"
  }?
# Optional attribute controlling whether to check whether all this
# beans dependencies, expressed in its properties, are satisfied.
# Default is no dependency checking.
# 
# "simple" type dependency checking includes primitives and String
# "object" includes collaborators (other beans in the factory)
# "all" includes both types of dependency checking
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &=
  [ a:defaultValue = "default" ]
  attribute dependency-check {
    "none" | "objects" | "simple" | "all" | "default"
  }?
# The names of the beans that this bean depends on being initialized.
# The bean factory will guarantee that these beans get initialized before.
# 
# Note that dependencies are normally expressed through bean properties or
# constructor arguments. This property should just be necessary for other kinds
# of dependencies like statics (*ugh*) or database preparation on startup.
# 
# Note: This attribute will not be inherited by child bean definitions.
# Hence, it needs to be specified per concrete bean definition.
attlist.bean &= attribute depends-on { text }?
# Optional attribute for the name of the custom initialization method
# to invoke after setting bean properties. The method must have no arguments,
# but may throw any exception.
attlist.bean &= attribute init-method { text }?
# Optional attribute for the name of the custom destroy method to invoke
# on bean factory shutdown. The method must have no arguments,
# but may throw any exception. Note: Only invoked on singleton beans!
attlist.bean &= attribute destroy-method { text }?
# Optional attribute specifying the name of a factory method to use to
# create this object. Use constructor-arg elements to specify arguments
# to the factory method, if it takes arguments. Autowiring does not apply
# to factory methods.
# 
# If the "class" attribute is present, the factory method will be a static
# method on the class specified by the "class" attribute on this bean
# definition. Often this will be the same class as that of the constructed
# object - for example, when the factory method is used as an alternative
# to a constructor. However, it may be on a different class. In that case,
# the created object will *not* be of the class specified in the "class"
# attribute. This is analogous to FactoryBean behavior.
# 
# If the "factory-bean" attribute is present, the "class" attribute is not
# used, and the factory method will be an instance method on the object
# returned from a getBean call with the specified bean name. The factory
# bean may be defined as a singleton or a prototype.
# 
# The factory method can have any number of arguments. Autowiring is not
# supported. Use indexed constructor-arg elements in conjunction with the
# factory-method attribute.
# 
# Setter Injection can be used in conjunction with a factory method.
# Method Injection cannot, as the factory method returns an instance,
# which will be used when the container creates the bean.
attlist.bean &= attribute factory-method { text }?
# Alternative to class attribute for factory-method usage.
# If this is specified, no class attribute should be used.
# This should be set to the name of a bean in the current or
# ancestor factories that contains the relevant factory method.
# This allows the factory itself to be configured using Dependency
# Injection, and an instance (rather than static) method to be used.
attlist.bean &= attribute factory-bean { text }?
# Bean definitions can specify zero or more constructor arguments.
# This is an alternative to "autowire constructor".
# Arguments correspond to either a specific index of the constructor argument
# list or are supposed to be matched generically by type.
# 
# Note: A single generic argument value will just be used once, rather than
# potentially matched multiple times (as of Spring 1.1).
# 
# constructor-arg elements are also used in conjunction with the factory-method
# element to construct beans using static or instance factory methods.
constructor-arg =
  element constructor-arg {
    attlist.constructor-arg,
    description?,
    (bean | ref | idref | value | null | \list | set | map | props)?
  }
# The constructor-arg tag can have an optional index attribute,
# to specify the exact index in the constructor argument list. Only needed
# to avoid ambiguities, e.g. in case of 2 arguments of the same type.
attlist.constructor-arg &= attribute index { text }?
# The constructor-arg tag can have an optional type attribute,
# to specify the exact type of the constructor argument. Only needed
# to avoid ambiguities, e.g. in case of 2 single argument constructors
# that can both be converted from a String.
attlist.constructor-arg &= attribute type { text }?
# A short-cut alternative to a child element "ref bean=".
attlist.constructor-arg &= attribute ref { text }?
# A short-cut alternative to a child element "value".
attlist.constructor-arg &= attribute value { text }?
# Bean definitions can have zero or more properties.
# Property elements correspond to JavaBean setter methods exposed
# by the bean classes. Spring supports primitives, references to other
# beans in the same or related factories, lists, maps and properties.
property =
  element property {
    attlist.property,
    description?,
    (bean | ref | idref | value | null | \list | set | map | props)?
  }
# The property name attribute is the name of the JavaBean property.
# This follows JavaBean conventions: a name of "age" would correspond
# to setAge()/optional getAge() methods.
attlist.property &= attribute name { text }
# A short-cut alternative to a child element "ref bean=".
attlist.property &= attribute ref { text }?
# A short-cut alternative to a child element "value".
attlist.property &= attribute value { text }?
# A lookup method causes the IoC container to override the given method and return
# the bean with the name given in the bean attribute. This is a form of Method Injection.
# It's particularly useful as an alternative to implementing the BeanFactoryAware
# interface, in order to be able to make getBean() calls for non-singleton instances
# at runtime. In this case, Method Injection is a less invasive alternative.
lookup-method = element lookup-method { attlist.lookup-method, empty }
# Name of a lookup method. This method should take no arguments.
attlist.lookup-method &= attribute name { text }?
# Name of the bean in the current or ancestor factories that the lookup method
# should resolve to. Often this bean will be a prototype, in which case the
# lookup method will return a distinct instance on every invocation. This
# is useful for single-threaded objects.
attlist.lookup-method &= attribute bean { text }?
# Similar to the lookup method mechanism, the replaced-method element is used to control
# IoC container method overriding: Method Injection. This mechanism allows the overriding
# of a method with arbitrary code.
replaced-method =
  element replaced-method { attlist.replaced-method, arg-type* }
# Name of the method whose implementation should be replaced by the IoC container.
# If this method is not overloaded, there's no need to use arg-type subelements.
# If this method is overloaded, arg-type subelements must be used for all
# override definitions for the method.
attlist.replaced-method &= attribute name { text }?
# Bean name of an implementation of the MethodReplacer interface
# in the current or ancestor factories. This may be a singleton or prototype
# bean. If it's a prototype, a new instance will be used for each method replacement.
# Singleton usage is the norm.
attlist.replaced-method &= attribute replacer { text }?
# Subelement of replaced-method identifying an argument for a replaced method
# in the event of method overloading.
arg-type = element arg-type { attlist.arg-type, text }
# Specification of the type of an overloaded method argument as a String.
# For convenience, this may be a substring of the FQN. E.g. all the
# following would match "java.lang.String":
# - java.lang.String
# - String
# - Str
# 
# As the number of arguments will be checked also, this convenience can often
# be used to save typing.
attlist.arg-type &= attribute match { text }?
# Defines a reference to another bean in this factory or an external
# factory (parent or included factory).
ref = element ref { attlist.ref, empty }
# References must specify a name of the target bean.
# The "bean" attribute can reference any name from any bean in the context,
# to be checked at runtime.
# Local references, using the "local" attribute, have to use bean ids;
# they can be checked by this DTD, thus should be preferred for references
# within the same bean factory XML file.
attlist.ref &= attribute bean { text }?
attlist.ref &= attribute local { xsd:IDREF }?
attlist.ref &= attribute parent { text }?
# Defines a string property value, which must also be the id of another
# bean in this factory or an external factory (parent or included factory).
# While a regular 'value' element could instead be used for the same effect,
# using idref in this case allows validation of local bean ids by the xml
# parser, and name completion by helper tools.
idref = element idref { attlist.idref, empty }
# ID refs must specify a name of the target bean.
# The "bean" attribute can reference any name from any bean in the context,
# potentially to be checked at runtime by bean factory implementations.
# Local references, using the "local" attribute, have to use bean ids;
# they can be checked by this DTD, thus should be preferred for references
# within the same bean factory XML file.
attlist.idref &= attribute bean { text }?
attlist.idref &= attribute local { xsd:IDREF }?
# Contains a string representation of a property value.
# The property may be a string, or may be converted to the
# required type using the JavaBeans PropertyEditor
# machinery. This makes it possible for application developers
# to write custom PropertyEditor implementations that can
# convert strings to objects.
# 
# Note that this is recommended for simple objects only.
# Configure more complex objects by populating JavaBean
# properties with references to other beans.
value = element value { attlist.value, text }
# The value tag can have an optional type attribute, to specify the
# exact type that the value should be converted to. Only needed
# if the type of the target property or constructor argument is
# too generic: for example, in case of a collection element.
attlist.value &= attribute type { text }?
# Denotes a Java null value. Necessary because an empty "value" tag
# will resolve to an empty String, which will not be resolved to a
# null value unless a special PropertyEditor does so.
null = element null { attlist.null, text }
attlist.null &= empty
# A list can contain multiple inner bean, ref, collection, or value elements.
# Java lists are untyped, pending generics support in Java 1.5,
# although references will be strongly typed.
# A list can also map to an array type. The necessary conversion
# is automatically performed by the BeanFactory.
\list =
  element list {
    attlist.list,
    (bean | ref | idref | value | null | \list | set | map | props)*
  }
attlist.list &= empty
# A set can contain multiple inner bean, ref, collection, or value elements.
# Java sets are untyped, pending generics support in Java 1.5,
# although references will be strongly typed.
set =
  element set {
    attlist.set,
    (bean | ref | idref | value | null | \list | set | map | props)*
  }
attlist.set &= empty
# A Spring map is a mapping from a string key to object.
# Maps may be empty.
map = element map { attlist.map, entry* }
attlist.map &= empty
# A map entry can be an inner bean, ref, value, or collection.
# The key of the entry is given by the "key" attribute or child element.
entry =
  element entry {
    attlist.entry,
    key?,
    (bean | ref | idref | value | null | \list | set | map | props)?
  }
# Each map element must specify its key as attribute or as child element.
# A key attribute is always a String value.
attlist.entry &= attribute key { text }?
# A short-cut alternative to a "key" element with a "ref bean=" child element.
attlist.entry &= attribute key-ref { text }?
# A short-cut alternative to a child element "value".
attlist.entry &= attribute value { text }?
# A short-cut alternative to a child element "ref bean=".
attlist.entry &= attribute value-ref { text }?
# A key element can contain an inner bean, ref, value, or collection.
key =
  element key {
    attlist.key,
    (bean | ref | idref | value | null | \list | set | map | props)
  }
attlist.key &= empty
# Props elements differ from map elements in that values must be strings.
# Props may be empty.
props = element props { attlist.props, prop* }
attlist.props &= empty
# Element content is the string value of the property.
# Note that whitespace is trimmed off to avoid unwanted whitespace
# caused by typical XML formatting.
prop = element prop { attlist.prop, text }
# Each property element must specify its key.
attlist.prop &= attribute key { text }
start = beans
