<!--#include virtual="/ssi/header.shtml" -->
    <h1>Some of My Favourite httperf Tricks</h1>
    <div id="main">
      <p>
        Performance testing a site with the same traffic pattern that
        the site is actually getting from users is a huge plus. To do
        this, we first ask Varnish to create an access log for us to
        play with:
      </p>
<pre class="prettyprint">
$ varnishncsa -d | \
  awk '{print $7}' | \
  tr "\n" "\0" \
  &gt; /tmp/access_log-$(date --iso).httperflog
</pre>
      <p>
        This httperf log can then be used to re-play the user traffic
        when running httperf.
      </p>
<pre class="prettyprint">
$ httperf \
  --server example.com \
  --wlog=y,/tmp/access_log-2012-06-04.log.httperflog \
  --num-conns=2000 \
  --rate=20 \
  --num-calls=30 \
  --hog
</pre>
      <p>
        This will make <code>httperf</code> set up <code>2000</code>
        TCP connections, creating <code>20</code> of them each second
        until it reaaches <code>2000</code>. It will then make
        <code>30</code> requests (calls) inside each TCP connetions,
        selecting a new URI from the httperf log file each time. When
        it reaches the bottom of the file, it will start at the top
        (that's the <code>y</code> parameter). Lastly, it's
        agressively <code>hog</code>ging all the TCP connections
        (i.e. local ports) it needs to get to <code>2000</code> TCP
        connetions.
      </p>
      <p>
        Of course, you probably want to run <code>httperf</code> from a
        different host on a different network.
      </p>
    </div>
<!--#include virtual="/ssi/footer.shtml" -->
