<!--#include virtual="/ssi/header.shtml" -->
    <h1>Some of My Favourite curl Tricks</h1>
    <div id="main">
      <h2>PUTing a file with curl</h2>
      <p>
        The most important parameters for PUTing a file are
        <code>-T</code> for the file and <cite>-X</cite> to specify
        the <code>PUT</code> HTTP method.
      </p>
<pre>
$ curl -I \
    -u user:pass \
    -T /tmp/user.xml \
    -X PUT \
    -H "Content-Type:application/atom+xml;type=entry" \
    -H "If-Match:*"
    http://myserver.com/users/id/10
</pre>
      <p>
        Of course, it might be that you don't need the headers I
        needed here, or that you need different ones. <cite>-H</cite>
        is how you specify them in any case.
      </p>
      <h2>Seeing what a site looks like as an iPhone</h2>
      <p>
        To see what the site looks like as a particular user agent,
        e.g. an iPhone, you can do the below. I find this very useful
        for testing the mobile version of web sites I'm developing.
      </p>
      <pre>$ curl \
  --header "Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5" \
  --dump-header - \
  http://mywebsite.com/</pre>
      <p>
        I also add <code>--dump-header -</code> to see the server
        response headers, essential when setting up servers and
        developing web applications :-)
      </p>
      <h2>Working with PAC files</h2>
      <p>
        As far as I know, neither <code>wget</code> nor
        <code>curl</code> has PAC support since PAC is implemented in
        JavaScript and neither of the command line tools know anything
        about that.
      </p>
      <p>
        But fear not! There's a pretty good solution. It's possible to
        both get PAC based HTTP proxy configuration, proxy password
        protection and digest autentication working with your
        favourite command line web ciient.
      </p>
      <p>
        First, set the <code>http_proxy</code> variable to the proxy
        server that your PAC file resolves too. If your PAC offers
        several proxies depending on the requested URL, you have to
        script around it. There's <code>libproxy-tools</code>, but I
        couldn't get it to work, hence, I just update the
        <code>http_proxy</code> variable whenever I need it:
      </p>
      <pre class="prettyprint">export http_proxy=http://&lt;user&gt;:&lt;password&gt;@proxyserver:&lt;port&gt;</pre>
      <p>
        If your proxy is using digest based authentication instead of
        basic authentication, you must pass the
        <code>--proxy-digest</code> flag to curl.
      </p>
      <p>
        The hostname you want to access does not need to be resolvable
        by your local host, it's enough that it's resolvable by the
        machine running the web proxy:
      </p>
      <pre class="prettyprint">$ curl --proxy-digest http://internal.mycompany.com/</pre>
      <p>
        If you look at the response headers, you'll see that
        <code>curl</code> needs to make two requests, one to get the
        challenge from the proxy server, and one to let through the
        request to the backend.
      </p>
      <p>
        So there you are, you're now (almost) free from the shackles of
        corporate world HTTP limitations!
      </p>
    </div>
<!--#include virtual="/ssi/footer.shtml" -->
