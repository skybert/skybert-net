<!--#include virtual="/ssi/header.shtml" -->
<!--#exec cgi="/cgi-bin/simple-h1.cgi" -->
    <div id="main">
      <h2>Arrays</h2>
      <p>
        Arrays is another hidden gem in BASH. BASH uses normal
        paranthesis to denote the start and end of arrays and a space
        signals the start of the next item:
      </p>
<pre class="prettyprint">fruit_array=("apples" "oranges" "bananas" "peaches" "papayas")</pre>
      <h3>Iterating an array using indexes</h3>
      <p>
        Iterating using an index isn't that much different from C
        style languages. The unusual bit, is the double parenthesises
        and the extravagant reading of the array length:
      </p>
<pre class="prettyprint">
for (( i = 0; i &lt; ${#fruit_array[@]}; i++ )); do
    echo $i "="  ${fruit_array[$i]}
done</pre>
      <h3>Iterating an array without an index</h3>
      <p>
        If you don't need the index variable, you can also just
        iterate through the array values like this:
      </p>
<pre class="prettyprint">for fruit in ${fruit_array[@]}; do
  echo $fruit
done</pre>
      <h3>Starting iterating on a specified index in the array</h3>
      <p>
        If you wish to address just a sub set of the array, you can
        add the indexes inside the curly braces. Here, I start
        iterating from the second item of the array:
      </p>
<pre class="prettyprint">for fruit in ${fruit_array[@]:1}; do
  echo $fruit "(skipped the first one)"
done
</pre>
      <p>
        Whereas here, I only want the the middle two fruits:
      </p>
      <pre class="prettyprint">for fruit in ${fruit_array[@]:1:3}; do
  echo $fruit "(skipped the first and last ones)"
done</pre>
      <h3>Creating an array of files</h3>
      <p>
        Often, you find yourself wanting a set of files into an array.
        This is easy,. simply do the following to get all
        <code>tar.gz</code> files in an array:
      </p>
<pre class="prettyprint">
tarballs=($(ls /my/dir/*.tar.gz))
</pre>
    </div>
<!--#include virtual="/ssi/footer.shtml" -->
