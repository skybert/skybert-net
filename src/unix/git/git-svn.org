#+title: Using Git as a frontend to Subversion

If you're like me and prefer using Git over Subversion, there's an
easy, secure way of doing this using the command set =git svn <command>=.

I've found these articles good starting points for doing using Git
with Subversion repositories. First off, this blog entry gives a give
run through of the usual use cases::
http://viget.com/extend/effectively-using-git-with-subversion and this
chapter from the Git book gives you the rest of the overview:
http://git-scm.com/book/ch8-1.html

Please note that the =svn= compatibility set of commands might not be
installed on your computer with the standard Git distribution. on
Debian based systems you can install the =git-svn= package to get
these additional commands, just as you must install the =git=cvs=
package to get a the CVS compatibility layer.

* Creating a local Git branch of a Subversion repository
To get you started, these are the first commands you need:
#+begin_src text
# apt-get install git-svn
$ git svn \
  --stdlayout \
  --prefix origin/ \
  clone \
  http://svn.skybert.net/my-project/trunk
#+end_src

* Getting the latest changes from the Subversion server
#+begin_src text
$ git svn rebase
#+end_src

* Pushing your changes to the Subversion server
#+begin_src text
$ git svn dcommt
#+end_src

* Interactive rebase
Normally, you can just use =git rebase -i= to squash/reorder/rewrite
your commits. Using =git-svn=, this doesn't work as your local branch
isn't connected to the repo in the same way.

What I've found to work neatly, is to rebase against the last
previously committed SHA. So first, look in =git log= to find the SHA
of the last commit which has been pushed/pulled to/from Subversion and
use this SHA as an argument to =git rebase=:

#+begin_src text
$ git rebase -i fc3ec194046e952ab4d0084406b0850210d8e0e8
#+end_src



