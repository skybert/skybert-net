#+TITLE: Using git

Here are some of my wee =git= notes.

* Publishing a branch
Often, you want to publish the branch you're working on:
#+begin_src text
$ git push -u origin my-great-feature
#+end_src

* Deleting a branch
#+begin_src text
git push origin --delete my-great-feature
#+end_src
* Make a local branch track a remote branch
This is typically what you want when you want to connect your local
branch to the corresponding one on the git server/github:

#+begin_src text
$ git branch --set-upstream-to=origin/feature/orphan-order-list feature/orphan-order-list
#+end_src

This creates the following stanza in your =.git/config= inside your
project source directory:

#+begin_src conf
[branch "feature/orphan-order-list"]
  remote = origin
  merge = refs/heads/feature/orphan-order-list
  rebase = true
#+end_src
* Deleting a tag

I use this when =git flow release= fails in the middle because of
something and I don't want to create a new version (tag) just to fix
the error:

#+begin_src text
$ git tag -d 1.10.1
$ git push origin :refs/tags/1.10.1
#+end_src
* Preferring our or their version of files
Sometimes, you're not interested in the conflicts Git presents you
with. You _know_ which version is right. In this case, you can apply
the =-X <strategy>= flag. The two strategies I find useful in this
context, is =ours= and =theirs=.

For instance, you're cherry picking a commit which has a lot of
conflicts with the version in your local branch. However, you want
the cherry picked commit to be preferred every time there's a
conflict. You can then do:
#+begin_src text
$ git cherry-pick -X theirs a4376d6946db12620116fa58786739d47a97a6f2
#+end_src

Check out =man git-merge= and search for =--strategy-option= for more
on this topic.

