#+title: Useful svn commands

Here are some of my favourite =svn= commands.

* Create a branch from trunk
#+begin_src text
$ svn copy http://svn.skybert.net/my-project/trunk \
  http://svn.skybert.net/my-project/branches/my-branch
#+end_src

* Merge branch back into trunk
#+begin_src text
$ cd trunk
$ svn merge --reintegrate http://svn.skybert.net/my-project/branches/my-branch
#+end_src

* Keep your branch up to date with changes in trunk
#+begin_src text
$ cd branches/my-branch
$ svn merge http://svn.skybert.net/my-project/trunk
#+end_src

* Resolving merge conflicts
When Subversion cannot figure out the conflict by itself, it'll ask
you:

#+begin_src text
Select: (p) postpone, (df) diff-full, (e) edit, (r) resolved,
        (mc) mine-conflict, (tc) theirs-conflict,
        (s) show all options:
#+end_src

I recommend pressing =dc= (display conflict), this will show you the
different versions of the conflicting fragments with the shortcuts you
need to press to select either of them: =tc= (their version) or =mc=
(my version).

* View the diff of a commit
#+begin_src text
$ svn diff -r <revision>
#+end_src

* Using Git as a frontend for Subversion
If you're like me and prefer using Git over Subversion, there's an
easy, secure way of doing this using the command set =git svn <command>=.

I've found these articles good starting points for doing using Git
with Subversion repositories. First off, this blog entry gives a give
run through of the usual use cases::
http://viget.com/extend/effectively-using-git-with-subversion and this
chapter from the Git book gives you the rest of the overview:
http://git-scm.com/book/ch8-1.html
  
Please note that the =svn= compatibility set of commands might not be
installed on your computer with the standard Git distribution. on
Debian based systems you can install the =git-svn= package to get
these additional commands, just as you must install the =git=cvs=
package to get a the CVS compatibility layer.

