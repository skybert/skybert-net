#+title: JRebel

[[http://zeroturnaround.com/software/jrebel][JRebel]] is a dash of magic: it brings a lot of the benefits of Python,
PHP, Perl, JSP & friends to Java. You change your Java file in your
editor, hit reload in your browser and: TADA! You're changes are
live. Amazing. Wondeful. Just the way it "should be" you will start to
think. Once you're used to this wonderful class proxying, hot swapping
goodness, you'll get pretty addicted to it. That's at least my
experience.

When setting it up, be sure to have matching versions of the JRebel
license server and the JRebel clients. Otherwise, you might experience
weird, illogical errors as explanations for why JRebel isn't working.

To start JBoss with JRebel, I use a wrapping script which I call
=/opt/jboss/bin/jrebel.sh=:

#+begin_src sh
jrebel_jar=/opt/jrebel-5.3.2/jrebel.jar
export JREBEL_OPTS="
  -javaagent:${jrebel_jar}
  -Drebel.properties=$HOME/.jrebel/jrebel.properties
"

$(dirname $0)/standalone.sh $@
#+end_src

As you can see, I'm referring to =jrebel.properties= in the JBoss
start script. To configure JRebel, I use the following in this
=jrebel.properties= to use a license server and my
(Emacs/Eclipse/Eclim) workspace:
#+begin_src sh
rebel.license.url=https://example.com/key

# This will produce a _lot_ of logging, so just keep it on when
# debugging JRebel issues.
rebel.log=true
# For some reason, this is always relative to $HOME,
rebel.log.file=.jrebel/jrebel.log

rebel.properties.version=2
rebel.license=$HOME/.jrebel/client.lic

# since I'm running jrebel as a different user, I don't use $HOME here
rebel.workspace.path=/home/torstein/src/workspace-eclim
#+end_src
