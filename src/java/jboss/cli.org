#+title: JBoss on the command line
#+options: toc:1

* Starting JBoss from the command line
** With the standard set of modules enabled
#+begin_src text
$ /opt/jboss/bin/standalone.sh
#+end_src

** With the full stack enabled
You can also start with an alternate configuration file. This file
must be relative to the JBoss =configuration= directory.

#+begin_src text
$ /opt/jboss/bin/standalone.sh --server-config=standalone-full.xml
#+end_src

This will use the configuration file
=/opt/jboss/standalone/standalone-full.xml= which loads the full stack.

* Starting the JBoss command line interface
#+begin_src text
$ cd /opt/jboss/bin/jboss-cli.sh -c
#+end_src

* Using the JBoss command line interface
** Listing all JNDI values
#+begin_src text
[standalone@localhost:9999] /subsystem=naming:jndi-view
#+end_src
Note, you cannot discover this value by simply changing into the
=subsystem/naming= directory and do an =ls=, you have to execute this
whole string as a command in itself.
** Adding a security domain
#+begin_src ruby
/subsystem=security/security-domain=my-security-domain/:add(cache-type=default)
/subsystem=security/security-domain=my-security-domain/authentication=classic:add( \
  login-modules=[ \
    { \
      "code" => "UsersRoles", \
      "flag" => "required", \
      "module-options" => [ \
        ("usersProperties" => "my-security-domain-users.properties"), \
        ("rolesProperties" => "my-security-domain-roles.properties"), \
        ("unauthenticatedIdentity" => "nobody") \
      ] \
    } \
  ] \
)
#+end_src

** Remove a security domain
#+begin_src ruby
/subsystem=security/security-domain=my-security-domain/:remove
#+end_src

** List all resources of a running JBoss instance
#+begin_src text
:read-resource(include-runtime=true, recursive=true)
#+end_src
Gives you a JSON structure which basically gives you everything you
ever wanted to know about your JBoss instance :-)

** Add your own JBoss modules
You can add your own JBoss modules (nice for code uses by several
deployed artifacts):

#+begin_src text
module add \
  --name=net.skybert.common \
  --resources=target/common.jar \
  --dependencies=javaee.api,com.fasterxml.jackson.core,com.fasterxml.jackson.databind
#+end_src

The dependencies are the names of other JBoss modules as can be found
in =/opt/jboss/modules=.

* Calling JBoss CLI from the command line
** Using pipes
JBoss CLI can read from standard input, which makes for easy UNIX piping:
#+begin_src text
echo "<cli command>" | /opt/jboss/bin/jboss-cli.sh -c
#+end_src

** Passing the commands directly to jboss-cli
You can pass the CLI command directly or using the =--command=
parameter:

#+begin_src text
/opt/jboss/bin/jboss-cli.sh -c "read-attribute server-state"
/opt/jboss/bin/jboss-cli.sh -c --command="read-attribute server-state"
#+end_src

** An alias of convenience
This wee alias saves me a fair bit of typing every day:

#+begin_src sh
# .bashrc
alias jboss-cli="/opt/jboss/bin/jboss-cli.sh -c"
#+end_src

Now, I can just type =jboss-cli= to connect to the JBoss CLI.

* Calling JBoss CLI inside BASH scripts
If you need to substitute any variables in your CLI commands, wrapping
these inside BASH commands is a neat solution:
#+begin_src sh
local jboss_cli_connect="/opt/jboss-eap-6.2/bin/jboss-cli.sh -c"

for domain_name in ${security_domain_name_list}; do
  ${jboss_cli_connect} <<EOF
/subsystem=security/security-domain=${domain_name}/:add(cache-type=default)
[..]
EOF

  if [ $? -eq 0 ]; then
    echo "JBoss CLI command(s) succeeded."
  fi
done
#+end_src

* JBoss CLI Caveats
*** cd ..
Issuing the command =cd ..= always takes you to the root, not the
parent directory.

*** Meta shortcuts doesn't work
The shortcuts are hard coded, so [[http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html][GNU readline]] isn't utilised.

This means all shortcuts like =M-d=, =M-<backspace>=, =M-f= and =M-b=
don't work.

*** Quoting your commands
Note, you have to wrap the command in quotes, even when not using the
=--command= parameter (!), i.e.:

#+begin_src text
# Will fail
$ /opt/jboss/bin/jboss-cli.sh -c read-attribute server-state
#+end_src

This is amazing since the =-c= parameter takes no value, thus
=jboss-cli.sh= *could* treat all consecutive arguments as commands.


* Further reading
- [[https://community.jboss.org/wiki/CommandLineInterface][JBoss Command Line Interface overview]]
- [[https://docs.jboss.org/author/display/AS71/CLI+Recipes][JBoss CLI Recipes]]
