#+title: ActiveMQ

These are my notes on using ActiveMQ.

* Why is there no admin application?
When installing ActiveMQ with the =apt-get=, there's no admin
application:
#+begin_src text
# apt-get install activemq
$ curl http://127.0.0.1:61616/admin
#+end_src

It's because it's not enabled per default. To enable it:
#+begin_src text
# zcat /usr/share/doc/activemq/examples/conf/jetty.xml.gz > /etc/activemq/instances-available/main/jetty.xml
#+end_src
You can now refer to it from your activemq.xml:
#+begin_src nxml
<beans>
  <!-- to get the admin console -->
  <import resource="jetty.xml"/>
</beans>
#+end_src

You may then run into this problem because the DEB package doesn't
have all the ActiveMQ features:

#+begin_src text
2014-01-02 13:28:38,065 | ERROR | Failed to load: class path resource [activemq.xml], reason: Failed to load type: org.eclipse.jetty.security.HashLoginService. Reason: java.lang.ClassNotFoundException: org.eclipse.jetty.security.HashLoginService; nested exception is java.lang.ClassNotFoundException: org.eclipse.jetty.security.HashLoginService | org.apache.activemq.xbean.XBeanBrokerFactory | main
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to load type: org.eclipse.jetty.security.HashLoginService. Reason: java.lang.ClassNotFoundException: org.eclipse.jetty.security.HashLoginService; nested exception is java.lang.ClassNotFoundException: org.eclipse.jetty.security.HashLoginService
#+end_src

I therefore used the JARs from the vanilla ActiveMQ distribution. I
didn't want to overwrite, or remove, any of the JARs that came with
the Debian packages, instead, I modified the init script so that the
it used the downloaded tarball instead of the package installed version.
#+begin_src diff
$ diff -w  activemq.orig activemq
21c21,23
< ACTIVEMQ_JAR=/usr/share/activemq/bin/run.jar
---
> activemq_home=/opt/activemq
> ACTIVEMQ_JAR=${activemq_home}/bin/run.jar
113c115
<       export ACTIVEMQ_HOME=/usr/share/activemq
---
>       export ACTIVEMQ_HOME=${activemq_home}
209c211
<       export ACTIVEMQ_HOME=/usr/share/activemq
---
>       export ACTIVEMQ_HOME=${activemq_home}
#+end_src

* Admin console says Could not resolve placeholder 'activemq.username'
#+begin_src text
  2014-01-02 13:46:25,366 | WARN | Failed startup of context
    o.e.j.w.WebAppContext{/admin,file:/opt/apache-activemq-5.6.0/webapps/admin/}
    | org.eclipse.jetty.webapp.WebAppContext | main
    org.springframework.beans.factory.BeanDefinitionStoreException:
    Invalid bean definition with name 'connectionFactory' defined in
    ServletContext resource [/WEB-INF/webconsole-embedded.xml]: Could
    not resolve placeholder 'activemq.username'
#+end_src

This was because I didn't have the activemq.username and password in
my =activemq.xml=
#+begin_src text
$ cat > /etc/activemq/instances-available/main/credentials.properties <<EOF
activemq.username=foo
activemq.password=bar
EOF
#+end_src


* ERROR on start up complaining about size
#+begin_src text
2014-01-02 13:08:57,919 | ERROR | Temporary Store limit is 50000 mb, whilst the temporary data directory: /var/lib/activemq/main/data/localhost/tmp_storage only has 5656 mb of usable space | org.apache.activemq.broker.BrokerService | main
#+end_src

* Cannot send, channel has already failed
#+begin_src
2014-01-02 13:01:02,927 | DEBUG | Reason: org.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: tcp://127.0.0.1:34528 |
 org.apache.activemq.broker.TransportConnector | ActiveMQ Task-19
org.apache.activemq.transport.InactivityIOException: Cannot send, channel has already failed: tcp://127.0.0.1:34528
        at org.apache.activemq.transport.AbstractInactivityMonitor.doOnewaySend(AbstractInactivityMonitor.java:255)
        at org.apache.activemq.transport.AbstractInactivityMonitor.oneway(AbstractInactivityMonitor.java:244)
        at org.apache.activemq.transport.WireFormatNegotiator.sendWireFormat(WireFormatNegotiator.java:168)
        at org.apache.activemq.transport.WireFormatNegotiator.sendWireFormat(WireFormatNegotiator.java:84)
        at org.apache.activemq.transport.WireFormatNegotiator.start(WireFormatNegotiator.java:74)
        at org.apache.activemq.transport.TransportFilter.start(TransportFilter.java:58)
        at org.apache.activemq.broker.TransportConnection.start(TransportConnection.java:914)
        at org.apache.activemq.broker.TransportConnector$1$1.run(TransportConnector.java:227)
        at java.lang.Thread.run(Thread.java:724)

#+end_src

* What's the difference between a topic and a subject?
Looking at this Java-snippet, they seam to mean the same thing:

#+begin_src java
String subject="topic.jay";
[..]
Destination destination = new ActiveMQTopic(subject);
#+end_src

Need to confirm this, though.

* Why don't two consumers get the same messages?
In my case, it was because I used a =queue= as =destination= instead
of a =topic=:
#+begin_src java
// all subscribers will compete for the same messages
Destination destination = session.createQueue(TOPIC_FLOOD);

// all subscribers get the messages
Destination destination = session.createTopic(TOPIC_FLOOD);
#+end_src

* What's the difference between a queue and a topic?
A =topic= is a =destination= which sends a copy of each message to
all the =subscribers=.

A =queue= is a destination, which is a =list= of a number of
=messages= which are sent to the =subscribers= (but they will not all
get their own copy).

* Why doesn't my consumer get messages from when it was offline?
In my case, it was because I wasn't using a durable =subscriber=, but
only a message consumer:

#+begin_src java
// Only get topic messages when the consumer is online
messageConsumer = session.createConsumer(destination);

// get topic messages when the from when the consumer was offline
session.createDurableSubscriber(topic);
#+end_src

Note that we have to specify topic and not the more general
=destination= when creating a durable subscriber.

Also note, that if you're using a queue, the consumer will get the
offline messages as well, so this is only (AFAIK) needed when you've
got multiple consumers.

* ActiveMQ start command doesn't work
The =bin/activemq= command doesn't work for some odd reason.

#+begin_src text
echo $APID > /opt/apache-activemq-5.9.0/data/activemq-quanah.pid; echo
"INFO: pidfile created :
'/opt/apache-activemq-5.9.0/data/activemq-quanah.pid' (pid
'$APID')";exit $RET: not found
#+end_src

Luckily, I found that the command residing in
=bin/linux-x86-64/activemq= works.

This was really annoying, nevertheless. =bin/activemq= should
work. It's the one that's documented on the ActiveMQ website and it's
the natural entry point when downloading the tarball. Whether or not
it needs an architecture specific command, is up to the (entry)
script itself to determine.
