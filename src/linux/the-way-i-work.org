#+title: The Way I work
This is a story about how I have set up my computer to work
efficiently in a typical modern office environment where I have to
have flawless interaction with a plethora of systems, including the
infamous Microsoft enterprise solutions.

* The rock on which I stand
My operating system of choice has since 2001 been Debian
GNU/Linux. Even after the advent of the excellent Ubuntu in 2004, I
still stuck with Debian proper and have never strayed from it. I love
it for it's stability, speed and unclutter -- even though it means I
have to work harder to get some things to work than if I had used say
Ubuntu or Mint.

* Desktop environment
I crave for speed. I want everything on my machine to be as fast as
possible. Therefore, I use a lightweight window manager called
Fluxbox. It's minimalist, looks good, is utterly configurable and
supports both KDE and GNOME dock apps.

I've experienced a lot with my desktop environment. I started out with
GNOME in 2000, but switched soon over to WindowMaker. I stayed with WM
until 2003 when I switched, so far for the last time, to Fluxbox.

In Fluxbox, I've set up a 4x2 grid of workspaces, thinking of the
first row as my "primary" row of tasks, with the row above as a
secondary or "helper" row for the corresponding below. Hence, I've got
=talk=, =web=, =emacs= and =files=. Above these four, I have a
corresponding helper workspace where I can offload related windows
that I don't use so much: =talk2=, =web2= and so on.

An example of a window I put on =web2=, are browser windows that I
just use once in a while for a specific task. These days I use Chrome
as my primary browser, but some things just works better in
Firefox. Hence, I put my Firefox windows on =web2=.

** talk
On my =talk= workspace, I have my dedicated chat clients *) like
Skype and email clients, such as Thunderbird.

** web
Browser windows

** emacs
Emacs is my primary programming environment with other IDEs that I use
once in a while during the work day on =emacs2=. For instance, I use
IDEA for debugging Java applications so I put it on =emacs2=.

** files
SSH sessions to various servers, file browsers and  the like.

* Mail
Sadly, many, many companies use Microsoft's Exchange server solution
for their mail, calendar and user database. If the (Windows)
administrators are kind, they'll open the IMAP, LDAP and SMTP interface of
the Exchange server to the users, in which case it's easy to get it
work with your favourite email client software.

However, this is not always the case. Sometimes, you'll just have the
native Exchange interface, in addition to the Exchange web interface
(Outloook Web Access, OWA). Because of the latter, I now use a local
Exchange-to-open standards proxy called DavMail. With it, I can use my
favourite email client, mu4e by the way of offlineimap.

I let =offlineimap= run every five minutes from cron, giving my a
full, up to date backup of _all_ my email accounts.

=mu= and =mu4e= then indexes and handles this email, giving me
blistering fast navigation and search.

My setup is like this:
#+begin_src text
outlook -> davmail -> offlineimap -> mu4e
#+end_src

* The programs I use
** Pictures
*** Organising pictures
I've written called =import-pictures= and =upload-to-picasa= which
manages all of my picture organisation. =import-pictures= imports my
pictures from my camera and puts them in a directory structure of my
liking. I.e.:
#+begin_src text
~/pictures/2013/2013-11/DCM_1000.JPG
~/pictures/2013/2013-11/DCM_1001.JPG
~/pictures/2013/2013-11/DCM_1002.JPG
#+end_src

*** Uploading pictures to Picasa
=upload-to-picasa= uploads pictures in a given directory to albums
with names corresponding to the time the pictures where taken. For
instance, for a picture taken the 17th of May 2013, =upload-to-picasa= will
create an album called "May 2013" if it doesn't already exist and then
uploads the pictures to that album.

*** Browsing pictures
To browse my pictures, I really like gThumb and Shotwell. gthumb is
the faster of the two so I tend to prefer it, although Shotwell is a
tad slicker and more polished.

** Editing images
GIMP

** Office
LibreOffice

** Music
*** Playing
I use the [[http://www.musicpd.org/][MPD]] music server on all my computers. It works well both as
a living room music solution and a stand alone music player on your
laptop.

When working, I use a long playlist and just bind shortcuts for next,
previous and pause/resume. I never use a graphical music player when
working, it's just distracting and sucks system resources unnecessary.

At home, I use the [[http://gmpclient.org/][gmpc]] graphical frontend and to control =mpd= from
my mobile phone, I use [[https://play.google.com/store/apps/details?id=com.namelessdev.mpdroid&hl=en][mpdroid]]. =mpdroid= does a fine job at it. It
looks pretty and gives access to most things that I want. The only
problem with =mpdroid= is that it crashes often, but since it's a
remote control and not the music player itself, it's not a problem.

*** Ripping & encoding
[[http://en.wikipedia.org/wiki/Grip_(software)][Grip]] is still the best ripper and encoder out there. It doesn't
complain if you want to rip MP3s and not OGGs, it let's you specify
the exact format of the output files and generally speaking, it
doesn't get on my nerves by insisting on doing something one
particular way.


** Browsing the web
Opera, Google Chrome and Iceweasel (Firefox).

** Video chat
Skype & GTalk in Chrome.

** Diagrams
*** blockdiag
For the most part I use [[http://blockdiag.com/en/blockdiag/][blockdiag]]. It's a text format for describing
diagrams by writing code instead of using a mouse. Once you're done
entering the entities of your diagram (the boxes), you define the
relation ship between them and let =blockdiag= generate a nice looking
SVG or PNG of your diagram.

=blockdiag= is really fast, makes nice looking diagrams and allows you
to check your diagrams into version control systems in a meaningful
way (since it's all just text files).

The killer feature, though, is in my opinion that you can _generate_
documentation by e.g. writing a BASH script which looks for all the
current servers running on your machine and then generates the
=blockdiag= text filed, from which =blockdiag= generates the final
diagram. Now, you've got a system architecture diagram which _never_
needs to become out of date. You just re-run the script whenever you
need an updated version of it.

** Whenever I prefer to point and click
A few times I venture back to [[https://projects.gnome.org/dia/][Dia]] (I've used this for many years) or
use the diagram editor in [[http://docs.google.com][Google Docs]].
** Office
I don't author that many office documents, but when I do, or when I
need to open any of the Microsoft Office formats, I normally find
[[http://libreoffice.org][LibreOffice]] more than adequate for the job.

LibreOffice is a beautiful, professional suite of programs that are
constantly updated and improved upon by a large community.

When I do need to write some documents (and I'm not writing them in
Org, HTML, XML or LaTeX) I often use Google Docs as it has excellent
collaboration super powers up its sleeve.
